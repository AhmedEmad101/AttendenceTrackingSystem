package attendencemanagementsystem;
import attendencemanagementsystem.Home;
import attendencemanagementsystem.Login;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.jar.Attributes.Name;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author ahmed emad
 */
public class JoinMeeting extends javax.swing.JFrame {

    public int UserId ;
    public JoinMeeting() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        MeetingIDTextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 0));

        jPanel2.setBackground(new java.awt.Color(153, 255, 51));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Search meeting");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(64, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(38, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(30, 30, 30))
        );

        MeetingIDTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MeetingIDTextFieldActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(153, 255, 0));
        jButton1.setText("Join");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("Meeting ID");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(187, 187, 187)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(177, 177, 177)
                        .addComponent(jLabel2)
                        .addGap(27, 27, 27)
                        .addComponent(MeetingIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(340, 340, 340)
                        .addComponent(jButton1)))
                .addContainerGap(272, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MeetingIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(54, 54, 54)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 201, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
public void setUserIdValue(int id)
{
    this.UserId = id;
}
public int getUserIdValue()
{
    return this.UserId;
}
public int IsLate(int MeetingHour,int UserAttendenceHour)
{
    if (MeetingHour < UserAttendenceHour)
    
        return 1;
    
    else return 0;
}
public boolean IsLate(String MeetingHour,String UserAttendenceHour)
{
       String MeetingTime = MeetingHour.replaceAll(" ","");
        String AttendenceTime = UserAttendenceHour.replaceAll(" ",""); 
        int mTime = Integer.parseInt(MeetingTime);
        int ATime = Integer.parseInt(AttendenceTime);
        if (mTime < ATime)
        {
            return true;
        }
        else return false;
       
}
public int MeetingMembersCount(int MeetingID)
{   int PeopleNumber = 0;
     Connection con = null;
      String ConnectionURL = "jdbc:sqlserver://localhost:1433;databaseName=AttendenceTrackingSystem;user=ahmedemad;password=123456;encrypt=true;trustServerCertificate=true;";
     try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(JoinMeeting.class.getName()).log(Level.SEVERE, null, ex);
        }
     
    try {
        con =   (Connection) DriverManager.getConnection(ConnectionURL);
        String checkQuery = "SELECT COUNT(*) FROM attendence WHERE MeetingID = ?";
        
        
        try (PreparedStatement ps = con.prepareStatement(checkQuery)) {
            ps.setInt(1, MeetingID);
           
            try (ResultSet resultSet = ps.executeQuery()) {
                if (resultSet.next()) {
                    int count = resultSet.getInt(1);
                    PeopleNumber = count;
                    return count ; // If count > 0, record exists
                }
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
        return PeopleNumber;
}
public int UserCountInMeeting(int UserID,int MeetingID) throws SQLException
{Connection con = null;
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(JoinMeeting.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    String ConnectionURL = "jdbc:sqlserver://localhost:1433;databaseName=AttendenceTrackingSystem;user=ahmedemad;password=123456;encrypt=true;trustServerCertificate=true;";
    con =   (Connection) DriverManager.getConnection(ConnectionURL);
    String sql = "select count (meeting_member_ID) from Meetings where id = ? and Meeting_member_ID = ? ";
    PreparedStatement statement = con.prepareStatement(sql);
    statement.setInt(1, UserID);
    statement.setInt(1, MeetingID);
            statement.execute();
            return 1;
}
private boolean isRecordExists(int meetingID, int userMemberID) {
     Connection con = null;
      String ConnectionURL = "jdbc:sqlserver://localhost:1433;databaseName=AttendenceTrackingSystem;user=ahmedemad;password=123456;encrypt=true;trustServerCertificate=true;";
     try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(JoinMeeting.class.getName()).log(Level.SEVERE, null, ex);
        }
     
    try {
        con =   (Connection) DriverManager.getConnection(ConnectionURL);
        String checkQuery = "SELECT COUNT(*) FROM Meeting_Info WHERE Meeting_ID = ? AND Meeting_member_ID = ?";
        
        try (PreparedStatement ps = con.prepareStatement(checkQuery)) {
            ps.setInt(1, meetingID);
            ps.setInt(2, userMemberID);
            try (ResultSet resultSet = ps.executeQuery()) {
                if (resultSet.next()) {
                    int count = resultSet.getInt(1);
                    return count > 0; // If count > 0, record exists
                }
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
    return false;
}

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       Connection con = null;
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(JoinMeeting.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    String ConnectionURL = "jdbc:sqlserver://localhost:1433;databaseName=AttendenceTrackingSystem;user=ahmedemad;password=123456;encrypt=true;trustServerCertificate=true;";
        try {
            con =   (Connection) DriverManager.getConnection(ConnectionURL);
             int id = Integer.parseInt(MeetingIDTextField.getText()) ;
            String sql = "select * from Meetings where id = ? ";
           PreparedStatement statement = con.prepareStatement(sql);
           statement.setInt(1, id);
            statement.execute();
           ResultSet resultSet = statement.executeQuery();
         if(resultSet.next()){
             if(id == resultSet.getInt("id")){
                 String MeetingTime = resultSet.getString("Meeting_Start_Time");
                  String query = "select * from Meetings join Users on Meeting_Owner_ID = Users.id where Meetings.id = ? ";
           PreparedStatement s = con.prepareStatement(query);
           s.setInt(1, id);
           ResultSet rs = s.executeQuery();
          
           
           if (rs.next()) { // Check if the result set contains rows
         
        int UserOwnerId = rs.getInt("Meeting_Owner_ID");
        String name = rs.getString("name");
        int Meeting_ID = rs.getInt("id");
        int MeetingPeopleNumber = MeetingMembersCount(Meeting_ID);
        CreateMeeting meeting = new CreateMeeting();
        meeting.SetMeetingID(Meeting_ID);
        meeting.setMeetingNumber(MeetingPeopleNumber);
        meeting.setMeetingLabel(name + " Meeting");
        //meeting.setMeetingNumber();
        Login login = new Login();
         Home h = new Home();         
         int userMemberID = h.getUserIdValue();//I made UserId object to be static in home class
         ////////////////////////////////////
         if(!isRecordExists(userMemberID,Meeting_ID)){
       if(UserOwnerId != userMemberID){
         String st = "insert into Meeting_Info (Meeting_ID,Meeting_member_ID) values (?,?)";
          PreparedStatement ps = con.prepareStatement(st);
          
     
          ps.setInt(1, Meeting_ID);
            ps.setInt(2, userMemberID);
          ps.execute();
       }
////////////////////////////////////////////////////////////////////////////////////////
LocalDate today = LocalDate.now();
        String formattedDate = today.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        LocalTime currentTime = LocalTime.now();
        int currentHour = currentTime.getHour();
        int currentSecond = currentTime.getSecond();
        String AttendenceTime = currentHour+" "+currentSecond;
    String AttendenceQuery = "insert into attendence(UserID,MeetingID,AttendenceTime,AttendenceStatus) values (?,?,?,?)"; 
    PreparedStatement ps2 = con.prepareStatement(AttendenceQuery);
    ps2.setInt(1, userMemberID);
    ps2.setInt(2, Meeting_ID);
    ps2.setString(3, AttendenceTime);
    if(IsLate(MeetingTime ,AttendenceTime ))
    {
         ps2.setString(4,"Late");
    }
    else{  ps2.setString(4,"On Time");}
    ps2.execute();
        meeting.setVisible(true);
       }
       meeting.setVisible(true);
        
           }
          
           
             }
         }
         else{ JOptionPane.showMessageDialog(null, "You entered wrong meeting id please try again");}
        } catch (SQLException ex) {
            Logger.getLogger(JoinMeeting.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void MeetingIDTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MeetingIDTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MeetingIDTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JoinMeeting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JoinMeeting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JoinMeeting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JoinMeeting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JoinMeeting().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField MeetingIDTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
